package OverlaySearch;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class WindowFindMalwareSingle {

    static String rootFolderPath = "/media/user01/HDD_4TB/AK_GOOGLE_APKS/testFolder";
    static String outputFolderPath = "/media/user01/HDD_4TB/AK_GOOGLE_APKS/window_params_presence";
    ///home/user01/Documents/decompiled_apks/toast_overlay_presence_malware

    public static void processJavaFileContents(String fileName, String fileContents, String folderName, JSONArray subFolderJsonArray, String absolutePath) {




        /*// Regular expression to find occurrences of WindowManager.LayoutParams and the variable name
        String pattern = "WindowManager.LayoutParams\\s+(\\w+)\\s*=\\s*new\\s+WindowManager.LayoutParams\\([^)]*\\)";

        // Create a Pattern object
        Pattern p = Pattern.compile(pattern);



        // Create a Matcher object
        Matcher m = p.matcher(content);

        // Find and store all occurrences and variable names in a map
        Map<String, String> occurrences = new HashMap<>();
        while (m.find()) {
            String variableName = m.group(1);
            String fullExpression = m.group();
            occurrences.put(variableName, fullExpression);
        }

        // Print the variable names and their corresponding expressions
        for (Map.Entry<String, String> entry : occurrences.entrySet()) {
            String variableName = entry.getKey();
            String fullExpression = entry.getValue();
            System.out.println("Variable Name: " + variableName);
            System.out.println("Full Expression: " + fullExpression);
            System.out.println("------------------------");
        }*/


        Pattern pattern = Pattern.compile("(WindowManager.LayoutParams\\.[A-Z_]+)|(LayoutParams.FLAG_[A-Z_]+)");
        Matcher matcher = pattern.matcher(fileContents);
        StringBuilder windowParams = new StringBuilder();

        while (matcher.find()) {
            String match = matcher.group();
            windowParams.append(match).append("####");
            System.out.println("Found: " + match);
        }


        if(windowParams.length() >0 )
            findMaliciousWindowFlags(fileName, fileContents, folderName, windowParams.toString(), subFolderJsonArray, absolutePath);



    }

    private static void findMaliciousWindowFlags(String fileName, String fileContents, String folderName, String windowParams, JSONArray subFolderJsonArray, String absolutePath) {

        String patternString = "\\b(FLAG_NOT_FOCUSABLE|FLAG_NOT_TOUCHABLE|FLAG_NOT_TOUCH_MODAL)\\b";
        Pattern pattern = Pattern.compile(patternString);
        Matcher matcher = pattern.matcher(windowParams);

        boolean isFlagPresent = matcher.find();

        // Check if any of the specified flags are
        if (isFlagPresent) {

            JSONObject  jsonObjectWindow = new JSONObject();
            try {
                //jsonObjectToast.put("variableName_" + t, variableName + ";;;;;;" + toastLines.toString());
                jsonObjectWindow.put("params_" , windowParams);
                jsonObjectWindow.put("fileName_" ,  fileName);
                jsonObjectWindow.put("fileFullPath_" , absolutePath);
                subFolderJsonArray.put( jsonObjectWindow);
                //toastLines.setLength(0);
            } catch (JSONException e) {
                e.printStackTrace();
            }

        }


    }

   /* public static boolean findFlagTouchable(String windowParams) {
        String patternString = "\\bFLAG_NOT_TOUCHABLE\\b";
        Pattern pattern = Pattern.compile(patternString);
        Matcher matcher = pattern.matcher(windowParams);
        return matcher.find();
    }*/




    private static void processFiles(File folder, String folderName, JSONArray subFolderJsonArray) {
        File[] files = folder.listFiles();

        if (files != null) {
            for (File file: files) {
                if (file.isDirectory()) {
                    processFiles(file, folderName, subFolderJsonArray); // Recursive call for subdirectories
                    //} else if (file.isFile() && file.getName().equals("SMSDetailListActivity.java")) {
                } else if (file.isFile() && file.getName().endsWith(".java")) {
                    try {
                        List < String > lines = Files.readAllLines(Path.of(file.getAbsolutePath()));
                        String contents = String.join(System.lineSeparator(), lines);
                        //System.out.println(contents);
                        processJavaFileContents(file.getName(), contents, folderName, subFolderJsonArray, file.getAbsolutePath());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    private static void readJavaFilesContents(String fullPath, String folderName, JSONArray subFolderJsonArray) {

        try{
            File folder = new File(fullPath);
            if (folder.exists() && folder.isDirectory()) {
                processFiles(folder, folderName, subFolderJsonArray);
            }
        } catch (Exception e) {
            System.out.println("Invalid folder path: " + folderName);
            System.out.println("Exception reading apk:" + folderName  + e.toString());
        }

    }

    public static void main(String[] args) {
        File rootFolder = new File(rootFolderPath);
        File[] subfolders = rootFolder.listFiles(File::isDirectory);

        /// processJavaFileContents(null, null, null, null, null);

        // Create a JSON object
        JSONObject allToastResults = new JSONObject();

        if (subfolders != null) {
            for (File subfolder: subfolders) {
                //System.out.println(subfolder.getName());

                String folderName = subfolder.getName(); //apkName

                String fullPath = rootFolderPath + File.separator + folderName;

                JSONArray subFolderJsonArray = new JSONArray();
                // if (folderName.equals("6ccbb27b770f8ed2ac77bb876edcabbc3ac0d1e89aa02d66e43198729011e162")) {
                System.out.println("Processing:...." + folderName + ".......");
                readJavaFilesContents(fullPath, folderName, subFolderJsonArray);
                //}//System.out.println(subFolderJsonArray);

                if(subFolderJsonArray.length() > 0) {
                    //System.out.println("results found: " + folderName +  subFolderJsonArray.length());
                    allToastResults.put(folderName, subFolderJsonArray);
                }
                System.out.println("---------------------------------------------------------------------------------");
                //}
            }
        }

        //System.out.println(allToastResults);
        // Save the JSON object to a file with pretty print
        try {
            FileWriter fileWriter = new FileWriter(outputFolderPath + File.separator + "gand.json");
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
            bufferedWriter.write(allToastResults.toString(4)); // Use indent factor of 4 for pretty print
            bufferedWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("could not write finally:" + e.toString());
        }



    }
}
